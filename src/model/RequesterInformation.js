/**
 * Mastercard Track Search API
 * All functionality related to the search service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RequesterOrganisationIdentification from './RequesterOrganisationIdentification';
import RequestingBusinessAddress from './RequestingBusinessAddress';

/**
 * The RequesterInformation model module.
 * @module model/RequesterInformation
 * @version 1.0.0
 */
class RequesterInformation {
    /**
     * Constructs a new <code>RequesterInformation</code>.
     * Information about the requester.
     * @alias module:model/RequesterInformation
     */
    constructor() { 
        
        RequesterInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RequesterInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RequesterInformation} obj Optional instance to populate.
     * @return {module:model/RequesterInformation} The populated <code>RequesterInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RequesterInformation();

            if (data.hasOwnProperty('bpsProfileId')) {
                obj['bpsProfileId'] = ApiClient.convertToType(data['bpsProfileId'], 'String');
            }
            if (data.hasOwnProperty('businessAddress')) {
                obj['businessAddress'] = RequestingBusinessAddress.constructFromObject(data['businessAddress']);
            }
            if (data.hasOwnProperty('businessName')) {
                obj['businessName'] = ApiClient.convertToType(data['businessName'], 'String');
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('organisationIdentifications')) {
                obj['organisationIdentifications'] = ApiClient.convertToType(data['organisationIdentifications'], [RequesterOrganisationIdentification]);
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RequesterInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RequesterInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bpsProfileId'] && !(typeof data['bpsProfileId'] === 'string' || data['bpsProfileId'] instanceof String)) {
            throw new Error("Expected the field `bpsProfileId` to be a primitive type in the JSON string but got " + data['bpsProfileId']);
        }
        // validate the optional field `businessAddress`
        if (data['businessAddress']) { // data not null
          RequestingBusinessAddress.validateJSON(data['businessAddress']);
        }
        // ensure the json data is a string
        if (data['businessName'] && !(typeof data['businessName'] === 'string' || data['businessName'] instanceof String)) {
            throw new Error("Expected the field `businessName` to be a primitive type in the JSON string but got " + data['businessName']);
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        if (data['organisationIdentifications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['organisationIdentifications'])) {
                throw new Error("Expected the field `organisationIdentifications` to be an array in the JSON data but got " + data['organisationIdentifications']);
            }
            // validate the optional field `organisationIdentifications` (array)
            for (const item of data['organisationIdentifications']) {
                RequesterOrganisationIdentification.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }

        return true;
    }


}



/**
 * Requesting Entity's Name Track BPS ID. Alphanumeric characters allowed.
 * @member {String} bpsProfileId
 */
RequesterInformation.prototype['bpsProfileId'] = undefined;

/**
 * @member {module:model/RequestingBusinessAddress} businessAddress
 */
RequesterInformation.prototype['businessAddress'] = undefined;

/**
 * Requesting Entity's Name. Alphanumeric characters allowed.
 * @member {String} businessName
 */
RequesterInformation.prototype['businessName'] = undefined;

/**
 * Requesting Entity's Email Address. Alphanumeric characters allowed.
 * @member {String} emailAddress
 */
RequesterInformation.prototype['emailAddress'] = undefined;

/**
 * Requesting Entity's organization identification.
 * @member {Array.<module:model/RequesterOrganisationIdentification>} organisationIdentifications
 */
RequesterInformation.prototype['organisationIdentifications'] = undefined;

/**
 * Requesting Entity's Phone Number. Alphanumeric characters allowed as well  as plus signs, spaces, parenthesis, hyphens, and periods.
 * @member {String} phoneNumber
 */
RequesterInformation.prototype['phoneNumber'] = undefined;






export default RequesterInformation;

