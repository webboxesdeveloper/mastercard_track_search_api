/**
 * Mastercard Track Search API
 * All functionality related to the search service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RequestingBusinessAddress model module.
 * @module model/RequestingBusinessAddress
 * @version 1.0.0
 */
class RequestingBusinessAddress {
    /**
     * Constructs a new <code>RequestingBusinessAddress</code>.
     * Business address details.
     * @alias module:model/RequestingBusinessAddress
     */
    constructor() { 
        
        RequestingBusinessAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RequestingBusinessAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RequestingBusinessAddress} obj Optional instance to populate.
     * @return {module:model/RequestingBusinessAddress} The populated <code>RequestingBusinessAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RequestingBusinessAddress();

            if (data.hasOwnProperty('addressLine1')) {
                obj['addressLine1'] = ApiClient.convertToType(data['addressLine1'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('countrySubDivision')) {
                obj['countrySubDivision'] = ApiClient.convertToType(data['countrySubDivision'], 'String');
            }
            if (data.hasOwnProperty('postCode')) {
                obj['postCode'] = ApiClient.convertToType(data['postCode'], 'String');
            }
            if (data.hasOwnProperty('townName')) {
                obj['townName'] = ApiClient.convertToType(data['townName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RequestingBusinessAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RequestingBusinessAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addressLine1'] && !(typeof data['addressLine1'] === 'string' || data['addressLine1'] instanceof String)) {
            throw new Error("Expected the field `addressLine1` to be a primitive type in the JSON string but got " + data['addressLine1']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['countrySubDivision'] && !(typeof data['countrySubDivision'] === 'string' || data['countrySubDivision'] instanceof String)) {
            throw new Error("Expected the field `countrySubDivision` to be a primitive type in the JSON string but got " + data['countrySubDivision']);
        }
        // ensure the json data is a string
        if (data['postCode'] && !(typeof data['postCode'] === 'string' || data['postCode'] instanceof String)) {
            throw new Error("Expected the field `postCode` to be a primitive type in the JSON string but got " + data['postCode']);
        }
        // ensure the json data is a string
        if (data['townName'] && !(typeof data['townName'] === 'string' || data['townName'] instanceof String)) {
            throw new Error("Expected the field `townName` to be a primitive type in the JSON string but got " + data['townName']);
        }

        return true;
    }


}



/**
 * Requesting Entity's Street Address. Alphanumeric characters allowed.
 * @member {String} addressLine1
 */
RequestingBusinessAddress.prototype['addressLine1'] = undefined;

/**
 * Requesting Entity's Country Code. Alphanumeric characters allowed.
 * @member {String} country
 */
RequestingBusinessAddress.prototype['country'] = undefined;

/**
 * Requesting Entity's State/Province. Alphanumeric characters allowed.
 * @member {String} countrySubDivision
 */
RequestingBusinessAddress.prototype['countrySubDivision'] = undefined;

/**
 * Requesting Entity's Postal Code. Alphanumeric characters allowed as well as spaces, hyphens, and dashes.
 * @member {String} postCode
 */
RequestingBusinessAddress.prototype['postCode'] = undefined;

/**
 * Requesting Entity's City. Alphanumeric characters allowed as well as periods, dashes, and apostrophes.
 * @member {String} townName
 */
RequestingBusinessAddress.prototype['townName'] = undefined;






export default RequestingBusinessAddress;

