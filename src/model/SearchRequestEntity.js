/**
 * Mastercard Track Search API
 * All functionality related to the search service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BusinessAddress from './BusinessAddress';
import OrganisationIdentification from './OrganisationIdentification';

/**
 * The SearchRequestEntity model module.
 * @module model/SearchRequestEntity
 * @version 1.0.0
 */
class SearchRequestEntity {
    /**
     * Constructs a new <code>SearchRequestEntity</code>.
     * List of all suppliers or buyers included in the original bulk search request.
     * @alias module:model/SearchRequestEntity
     * @param businessName {String} Entity Name to be queried. Alphanumeric characters allowed.
     * @param searchRequestId {String} Every record must contain a request id as an identifier. Alphanumeric and hyphens are allowed.
     */
    constructor(businessName, searchRequestId) { 
        
        SearchRequestEntity.initialize(this, businessName, searchRequestId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, businessName, searchRequestId) { 
        obj['businessName'] = businessName;
        obj['searchRequestId'] = searchRequestId;
    }

    /**
     * Constructs a <code>SearchRequestEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchRequestEntity} obj Optional instance to populate.
     * @return {module:model/SearchRequestEntity} The populated <code>SearchRequestEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchRequestEntity();

            if (data.hasOwnProperty('annualInvoiceCount')) {
                obj['annualInvoiceCount'] = ApiClient.convertToType(data['annualInvoiceCount'], 'String');
            }
            if (data.hasOwnProperty('annualNumberOfTransactions')) {
                obj['annualNumberOfTransactions'] = ApiClient.convertToType(data['annualNumberOfTransactions'], 'String');
            }
            if (data.hasOwnProperty('annualTransactionAmount')) {
                obj['annualTransactionAmount'] = ApiClient.convertToType(data['annualTransactionAmount'], 'String');
            }
            if (data.hasOwnProperty('businessAddress')) {
                obj['businessAddress'] = BusinessAddress.constructFromObject(data['businessAddress']);
            }
            if (data.hasOwnProperty('businessName')) {
                obj['businessName'] = ApiClient.convertToType(data['businessName'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('organisationIdentifications')) {
                obj['organisationIdentifications'] = ApiClient.convertToType(data['organisationIdentifications'], [OrganisationIdentification]);
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = ApiClient.convertToType(data['paymentMethod'], 'String');
            }
            if (data.hasOwnProperty('paymentTerms')) {
                obj['paymentTerms'] = ApiClient.convertToType(data['paymentTerms'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('searchRequestId')) {
                obj['searchRequestId'] = ApiClient.convertToType(data['searchRequestId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchRequestEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchRequestEntity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchRequestEntity.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['annualInvoiceCount'] && !(typeof data['annualInvoiceCount'] === 'string' || data['annualInvoiceCount'] instanceof String)) {
            throw new Error("Expected the field `annualInvoiceCount` to be a primitive type in the JSON string but got " + data['annualInvoiceCount']);
        }
        // ensure the json data is a string
        if (data['annualNumberOfTransactions'] && !(typeof data['annualNumberOfTransactions'] === 'string' || data['annualNumberOfTransactions'] instanceof String)) {
            throw new Error("Expected the field `annualNumberOfTransactions` to be a primitive type in the JSON string but got " + data['annualNumberOfTransactions']);
        }
        // ensure the json data is a string
        if (data['annualTransactionAmount'] && !(typeof data['annualTransactionAmount'] === 'string' || data['annualTransactionAmount'] instanceof String)) {
            throw new Error("Expected the field `annualTransactionAmount` to be a primitive type in the JSON string but got " + data['annualTransactionAmount']);
        }
        // validate the optional field `businessAddress`
        if (data['businessAddress']) { // data not null
          BusinessAddress.validateJSON(data['businessAddress']);
        }
        // ensure the json data is a string
        if (data['businessName'] && !(typeof data['businessName'] === 'string' || data['businessName'] instanceof String)) {
            throw new Error("Expected the field `businessName` to be a primitive type in the JSON string but got " + data['businessName']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        if (data['organisationIdentifications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['organisationIdentifications'])) {
                throw new Error("Expected the field `organisationIdentifications` to be an array in the JSON data but got " + data['organisationIdentifications']);
            }
            // validate the optional field `organisationIdentifications` (array)
            for (const item of data['organisationIdentifications']) {
                OrganisationIdentification.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['paymentMethod'] && !(typeof data['paymentMethod'] === 'string' || data['paymentMethod'] instanceof String)) {
            throw new Error("Expected the field `paymentMethod` to be a primitive type in the JSON string but got " + data['paymentMethod']);
        }
        // ensure the json data is a string
        if (data['paymentTerms'] && !(typeof data['paymentTerms'] === 'string' || data['paymentTerms'] instanceof String)) {
            throw new Error("Expected the field `paymentTerms` to be a primitive type in the JSON string but got " + data['paymentTerms']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['searchRequestId'] && !(typeof data['searchRequestId'] === 'string' || data['searchRequestId'] instanceof String)) {
            throw new Error("Expected the field `searchRequestId` to be a primitive type in the JSON string but got " + data['searchRequestId']);
        }

        return true;
    }


}

SearchRequestEntity.RequiredProperties = ["businessName", "searchRequestId"];

/**
 * Annual number of invoices with Trading Partner.
 * @member {String} annualInvoiceCount
 */
SearchRequestEntity.prototype['annualInvoiceCount'] = undefined;

/**
 * Annual number of transactions with Trading Partner.
 * @member {String} annualNumberOfTransactions
 */
SearchRequestEntity.prototype['annualNumberOfTransactions'] = undefined;

/**
 * Annual spend/revenue with Trading Partner in the currency listed.
 * @member {String} annualTransactionAmount
 */
SearchRequestEntity.prototype['annualTransactionAmount'] = undefined;

/**
 * @member {module:model/BusinessAddress} businessAddress
 */
SearchRequestEntity.prototype['businessAddress'] = undefined;

/**
 * Entity Name to be queried. Alphanumeric characters allowed.
 * @member {String} businessName
 */
SearchRequestEntity.prototype['businessName'] = undefined;

/**
 * 3 letter currency code used with Trading Partner.
 * @member {String} currency
 */
SearchRequestEntity.prototype['currency'] = undefined;

/**
 * Email Address of Entity to be queried. Alphanumeric characters allowed.
 * @member {String} emailAddress
 */
SearchRequestEntity.prototype['emailAddress'] = undefined;

/**
 * Organisation identification for the Entity being queried.
 * @member {Array.<module:model/OrganisationIdentification>} organisationIdentifications
 */
SearchRequestEntity.prototype['organisationIdentifications'] = undefined;

/**
 * Payment rail used for payment.
 * @member {String} paymentMethod
 */
SearchRequestEntity.prototype['paymentMethod'] = undefined;

/**
 * Payment terms with Trading Partner.
 * @member {String} paymentTerms
 */
SearchRequestEntity.prototype['paymentTerms'] = undefined;

/**
 * Phone Number of Entity to be queried. Alphanumeric characters allowed as well as plus signs, spaces, parenthesis, hyphens, and periods.
 * @member {String} phoneNumber
 */
SearchRequestEntity.prototype['phoneNumber'] = undefined;

/**
 * Every record must contain a request id as an identifier. Alphanumeric and hyphens are allowed.
 * @member {String} searchRequestId
 */
SearchRequestEntity.prototype['searchRequestId'] = undefined;






export default SearchRequestEntity;

