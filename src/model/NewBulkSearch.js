/**
 * Mastercard Track Search API
 * All functionality related to the search service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RequesterInformation from './RequesterInformation';
import SearchRequestEntity from './SearchRequestEntity';

/**
 * The NewBulkSearch model module.
 * @module model/NewBulkSearch
 * @version 1.0.0
 */
class NewBulkSearch {
    /**
     * Constructs a new <code>NewBulkSearch</code>.
     * Bulk search criteria information.
     * @alias module:model/NewBulkSearch
     * @param lookupType {String} Type of Entity being queried. Alphanumeric characters allowed.
     */
    constructor(lookupType) { 
        
        NewBulkSearch.initialize(this, lookupType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lookupType) { 
        obj['lookupType'] = lookupType;
    }

    /**
     * Constructs a <code>NewBulkSearch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewBulkSearch} obj Optional instance to populate.
     * @return {module:model/NewBulkSearch} The populated <code>NewBulkSearch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewBulkSearch();

            if (data.hasOwnProperty('lookupType')) {
                obj['lookupType'] = ApiClient.convertToType(data['lookupType'], 'String');
            }
            if (data.hasOwnProperty('maximumMatches')) {
                obj['maximumMatches'] = ApiClient.convertToType(data['maximumMatches'], 'Number');
            }
            if (data.hasOwnProperty('minimumConfidenceThreshold')) {
                obj['minimumConfidenceThreshold'] = ApiClient.convertToType(data['minimumConfidenceThreshold'], 'String');
            }
            if (data.hasOwnProperty('requestingEntity')) {
                obj['requestingEntity'] = RequesterInformation.constructFromObject(data['requestingEntity']);
            }
            if (data.hasOwnProperty('searches')) {
                obj['searches'] = ApiClient.convertToType(data['searches'], [SearchRequestEntity]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewBulkSearch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewBulkSearch</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NewBulkSearch.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['lookupType'] && !(typeof data['lookupType'] === 'string' || data['lookupType'] instanceof String)) {
            throw new Error("Expected the field `lookupType` to be a primitive type in the JSON string but got " + data['lookupType']);
        }
        // ensure the json data is a string
        if (data['minimumConfidenceThreshold'] && !(typeof data['minimumConfidenceThreshold'] === 'string' || data['minimumConfidenceThreshold'] instanceof String)) {
            throw new Error("Expected the field `minimumConfidenceThreshold` to be a primitive type in the JSON string but got " + data['minimumConfidenceThreshold']);
        }
        // validate the optional field `requestingEntity`
        if (data['requestingEntity']) { // data not null
          RequesterInformation.validateJSON(data['requestingEntity']);
        }
        if (data['searches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['searches'])) {
                throw new Error("Expected the field `searches` to be an array in the JSON data but got " + data['searches']);
            }
            // validate the optional field `searches` (array)
            for (const item of data['searches']) {
                SearchRequestEntity.validateJSON(item);
            };
        }

        return true;
    }


}

NewBulkSearch.RequiredProperties = ["lookupType"];

/**
 * Type of Entity being queried. Alphanumeric characters allowed.
 * @member {String} lookupType
 */
NewBulkSearch.prototype['lookupType'] = undefined;

/**
 * Maximum number of matches to be returned per record. Default 1, Max 5
 * @member {Number} maximumMatches
 */
NewBulkSearch.prototype['maximumMatches'] = undefined;

/**
 * Minimum confidence match to be included in results.
 * @member {String} minimumConfidenceThreshold
 */
NewBulkSearch.prototype['minimumConfidenceThreshold'] = undefined;

/**
 * @member {module:model/RequesterInformation} requestingEntity
 */
NewBulkSearch.prototype['requestingEntity'] = undefined;

/**
 * List of all suppliers or buyers included in the original bulk search request.
 * @member {Array.<module:model/SearchRequestEntity>} searches
 */
NewBulkSearch.prototype['searches'] = undefined;






export default NewBulkSearch;

